# | any non-negative integer (**`4`**)                    | How many spaces to use as an indent
indentation: 2
# | **`none`**, or any non-negative integer               | Try to break up lines that are longer than this character limit. May break idempotence.
column-limit: 80
# | **`trailing`**, `leading`, `leading-args`             | Where to place arrows in type signatures
function-arrows: leading
# | **`leading`**, `trailing`                             | Where to place commas in lists, tuples, etc.
comma-style: leading
# | `leading`, `trailing`, **`diff-friendly`**            | How to format multiline import/export lists (`diff-friendly` lists have trailing commas but keep the opening parenthesis on the same line as `import`)
import-export-style: diff-friendly
# | `true`, **`false`**                                   | Use an extra level of indentation _vs_ only half-indent the `where` keyword
indent-wheres: true
# | `true`, **`false`**                                   | `rec {x = 1}` _vs_ `rec{x = 1}`
record-brace-space: true
# | any integer (**`1`**)                                 | Number of newlines between top-level declarations
newlines-between-decls: 2
# | `single-line`, **`multi-line`**, `multi-line-compact` | Use `-- \|`, `{- \|`, or `{-\|` for multiline haddocks (single-line haddocks always use `--`)
haddock-style: single-line
# | `inline`, `newline`, **`auto`**, `mixed`              | How to style `let` blocks (`auto` uses `newline` if there's a newline in the input and `inline` otherwise, and `mixed` uses `inline` only when the `let` has exactly one binding)
let-style: auto
# | `left-align`, **`right-align`**, `no-space`           | How to align the `in` keyword with respect to `let` (`left-align` produces <code>in &nbsp;...</code>, `right-align` produces <code>&nbsp;in ...</code>, `no-space` produces <code>in ...</code>)
in-style: right-align
# | **`always`**, `never`, `auto`                         | Whether to style optional parentheses around single constraints
single-constraint-parens: auto
# | `always`, `detect`, **`never`**                       | Output Unicode syntax. With `detect` we output Unicode syntax exactly when the extension is seen to be enabled. When using `always`, make sure to have the `UnicodeSyntax` extension enabled, or Fourmolu will throw errors.
unicode: never
# | **`true`**, `false`                                   | Be less aggressive in reformatting input, e.g. keep empty lines in import list
respectful: false
# | list of strings (**`[]`**)                            | See the "Language extensions, dependencies, and fixities" section below
fixities: []
