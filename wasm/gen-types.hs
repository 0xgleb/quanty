{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeApplications #-}

-- \| Type generation script for aeson-typescript
-- Generates TypeScript type definitions from Haskell ADTs
-- Run from build.sh with: cabal run gen-types (uses Nix environment)

import Data.Aeson (FromJSON, Options, ToJSON, defaultOptions)
import Data.Aeson.TypeScript.TH qualified as TS
import Data.List (isPrefixOf)
import Data.Proxy (Proxy (..))
import Data.Text (Text)
import GHC.Generics (Generic)
import System.IO qualified as IO


-- Import the test type from Main
-- For now, we define it here to avoid module dependencies
data TestMessage = TestMessage
  { message :: Text
  , value :: Int
  }
  deriving stock (Generic, Show, Eq)
  deriving anyclass (ToJSON, FromJSON)


$(TS.deriveTypeScript defaultOptions ''TestMessage)


main :: IO ()
main = do
  let declarations = TS.getTypeScriptDeclarations (Proxy @TestMessage)
  let tsCode = TS.formatTSDeclarations declarations

  -- Add 'export' to all interfaces
  let tsLines = lines tsCode
  let exportedLines = map addExport tsLines
  let exportedCode = unlines exportedLines

  -- Write to frontend types file
  let outputPath = "../frontend/src/lib/wasm/types.ts"

  putStrLn $ "Generating TypeScript types to " <> outputPath
  IO.writeFile outputPath $
    unlines
      [ "// Generated by wasm/gen-types.hs"
      , "// DO NOT EDIT - This file is automatically generated"
      , ""
      , exportedCode
      ]
  putStrLn "âœ“ TypeScript types generated successfully"


addExport :: String -> String
addExport line
  | "type " `isPrefixOf` line = "export " <> line
  | "interface " `isPrefixOf` line = "export " <> line
  | otherwise = line
