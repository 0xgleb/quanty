{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeApplications #-}

-- \| Type generation script for aeson-typescript
-- Generates TypeScript type definitions from Haskell ADTs
-- Run from build.sh with: cabal run gen-types (uses Nix environment)

import BlackScholes qualified as BS
import Data.Aeson.TypeScript.TH qualified as TS
import Data.List (isPrefixOf)
import Data.Proxy (Proxy (..))
import System.IO qualified as IO


main :: IO ()
main = do
  -- Generate types for all BlackScholes ADTs
  let declarations =
        TS.getTypeScriptDeclarations (Proxy @BS.OptionKind)
          <> TS.getTypeScriptDeclarations (Proxy @BS.TimeToExpiryDays)
          <> TS.getTypeScriptDeclarations (Proxy @BS.Inputs)
          <> TS.getTypeScriptDeclarations (Proxy @BS.Greeks)
          <> TS.getTypeScriptDeclarations (Proxy @BS.OptionPrice)
  let tsCode = TS.formatTSDeclarations declarations

  -- Add 'export' to all interfaces
  let tsLines = lines tsCode
  let exportedLines = map addExport tsLines
  let exportedCode = unlines exportedLines

  -- Write to frontend types file
  let outputPath = "../frontend/src/lib/wasm/types.ts"

  putStrLn $ "Generating TypeScript types to " <> outputPath
  IO.writeFile outputPath $
    unlines
      [ "// Generated by wasm/gen-types.hs"
      , "// DO NOT EDIT - This file is automatically generated"
      , ""
      , exportedCode
      ]
  putStrLn "âœ“ TypeScript types generated successfully"


addExport :: String -> String
addExport line
  | "type " `isPrefixOf` line = "export " <> line
  | "interface " `isPrefixOf` line = "export " <> line
  | otherwise = line
