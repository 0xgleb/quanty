name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  haskell-checks:
    name: Haskell Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Haskell
        uses: haskell-actions/setup@v2
        with:
          ghc-version: '9.4.8'
          enable-stack: true
          stack-version: 'latest'

      - name: Cache Stack dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.stack
            .stack-work
          key: ${{ runner.os }}-stack-${{ hashFiles('stack.yaml', 'package.yaml') }}
          restore-keys: |
            ${{ runner.os }}-stack-

      - name: Install dependencies
        run: stack build --only-dependencies --test --no-run-tests

      - name: Build Haskell project
        run: stack build --test --no-run-tests

      - name: Run tests
        run: stack test

  haskell-formatting:
    name: Haskell Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Check Fourmolu formatting
        run: |
          nix-shell -p haskellPackages.fourmolu --run "fourmolu --mode check app/ src/ OptionsPricing.hs"

  haskell-linting:
    name: Haskell Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Run HLint
        run: |
          nix-shell -p haskellPackages.hlint --run "hlint app/ src/ OptionsPricing.hs"

  frontend-checks:
    name: Frontend Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Check TypeScript
        run: npx svelte-kit sync && npx tsc --noEmit

      - name: Build frontend
        run: npm run build

  nix-formatting:
    name: Nix Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Check Nix formatting
        run: |
          nix-shell -p nixpkgs-fmt --run "nixpkgs-fmt --check *.nix"

  pre-commit-hooks:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Enable Nix Flakes
        run: |
          mkdir -p ~/.config/nix
          echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

      - name: Run pre-commit checks
        run: |
          nix flake check --all-systems
